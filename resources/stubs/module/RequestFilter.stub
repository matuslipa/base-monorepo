<?php

declare(strict_types=1);

namespace App\Containers\{{containerName}}\Requests;

use App\Containers\{{containerName}}\Models\{{modelSingular}};
use App\Containers\{{containerName}}\Values\InputData\{{modelSingular}}InputData;
use App\Core\Parents\Requests\RequestFilter;
use Illuminate\Http\Request;
use Illuminate\Validation\Factory as ValidatorFactory;
use Illuminate\Validation\ValidationException;

/**
 * @package App\Containers\{{containerName}}
 */
final class {{modelSingular}}RequestFilter extends RequestFilter
{
    public const FIELD_NAME = {{modelSingular}}::ATTR_NAME;

    /**
     * @param \Illuminate\Validation\Factory $validatorFactory
     */
    public function __construct(
        private readonly ValidatorFactory $validatorFactory
    ) {
    }

    /**
     * Get values for model.
     *
     * @param \Illuminate\Http\Request $request
     * @param \App\Containers\{{containerName}}\Models\{{modelSingular}}|null ${{modelVariable}}
     *
     * @return \App\Containers\{{containerName}}\Values\InputData\{{modelSingular}}InputData
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function getValidatedData(
        Request $request,
        ?{{modelSingular}} ${{modelVariable}} = null
    ): {{modelSingular}}InputData {
        $rawData = $this->validate($request, ${{modelVariable}});
        return new {{modelSingular}}InputData($rawData);
    }

    /**
     * @param \Illuminate\Http\Request $request
     * @param \App\Containers\{{containerName}}\Models\{{modelSingular}}|null ${{modelVariable}}
     *
     * @return string[] validated fields
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function validate(Request $request, ?{{modelSingular}} ${{modelVariable}} = null): array
    {
        $rules = $this->getRules($request, ${{modelVariable}});
        $validator = $this->validatorFactory->make($request->all(), $rules);

        if ($validator->fails()) {
            throw new ValidationException($validator);
        }

        return $validator->validated();
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @param \Illuminate\Http\Request $request
     * @param \App\Containers\{{containerName}}\Models\{{modelSingular}}|null ${{modelVariable}}
     * @return array<string, array<string>>
     */
    private function getRules(Request $request, ?{{modelSingular}} ${{modelVariable}} = null): array
    {
        $isPatch = $request->isMethod(Request::METHOD_PATCH);

        $sometimesRequired = $isPatch ? 'sometimes' : 'required';
        $sometimesPresent = $isPatch ? 'sometimes' : 'present';

        return [
            self::FIELD_NAME => [
                $sometimesRequired,
                'string',
                'max:100',
            ],
        ];
    }
}
